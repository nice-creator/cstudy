1普通局部变量
2普通全局变量
3静态局部变量
4静态全局变量

普通局部变量
定义形式:在{}复合语句内部
作用范围:离他最近的{}之间有效
int main()
{
    int num1=10;
    {
        int num2=20;
    }
    
    printf("%d\n",num1);
    printf("%d\n",num2);//会报错，没有生效
    return 0;
}
生命周期:离开{}的局部变量，系统自动回收
存储区域:栈区
注意事项:1 普通局部变量不初始化，内容不确定
        2 普通局部变量同名的话，就近的生效。
------------------------------------------------
普通全局变量
定义形式:在函数外边的变量，就是普通全局变量
作用范围：1 当前源文件都生效
         2 其他源文件使用全局变量，必须加extern声明
    //extern 本质告诉编译器 变量或函数来自其他源文件,请通过编译      
extern int data; //在函数后边定义的话需要先声明
void test01()
{
    printf("%d\n",data);    
}
int data=10; //普通全局变量，在函数外定义
int main()
{
    test01();
    return 0;
}
生命周期: 整个进程都有效(程序结束的时候全局变量才会被释放)
存储区域:全局区
注意事项:1 全局变量不初始化内容为0
        2 如果全局变量要在其他源文件中使用，必须extern声明
        3 如果全局变量和局部变量同名，优先使用局部变量
--------------------------------------------------------------

静态局部变量
定义形式:在{}复合语句中定义，前面必须加static修饰，这样的变量叫静态局部变量
作用范围:离它最近的{}中有效
生命周期:整个进程，程序结束的时候静态局部变量才被释放
int fun(void)
{
    static int num = 10;
    num++;
    printf("%d\n",num);
}
int main()
{
    fun();  //11
    fun();  //12
    fun();  //13
    fun();  //14
    return 0;
}
存储区域:全局区 ，可以用来统计函数调用次数
注意事项:1 静态局部变量不初始化内容为0
        2 只能被定义一次
-------------------------------------------------

静态全局变量
定义形式：在函数外边定义，前边必须加static修饰
作用范围：当前源文件有效，不能在其他源文件中使用(多人开发时各个文件变量不冲突)
生命周期：整个进程
存储区域:全局区
注意事项：1 静态全局变量不初始化内容为0
         2 只在当前源文件有效

